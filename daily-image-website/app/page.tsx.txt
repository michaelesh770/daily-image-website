"use client"

import type React from "react"

import { useState } from "react"
import { useRouter } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { supabase, isDemoMode, demoData } from "@/lib/supabase"
import { Eye, Lock, AlertCircle } from 'lucide-react'

export default function LoginPage() {
  const [code, setCode] = useState("")
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState("")
  const router = useRouter()

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setLoading(true)
    setError("")

    try {
      if (isDemoMode) {
        // Demo mode - check against demo codes
        const demoCode = demoData.accessCodes.find((c) => c.code === code.trim() && !c.is_used)

        if (!demoCode) {
          setError("קוד גישה לא תקין או כבר נוצל. נסה: DEMO123")
          return
        }

        // Mark demo code as used
        demoCode.is_used = true
        demoCode.used_at = new Date().toISOString()

        // Store access in localStorage
        localStorage.setItem("daily_image_access", "true")
        localStorage.setItem("access_time", new Date().toISOString())
        localStorage.setItem("demo_access_code_id", "1")

        // Go to registration
        router.push(`/register?access_code_id=1`)
        return
      }

      // Production mode - use Supabase
      const { data: accessCode, error: fetchError } = await supabase
        .from("access_codes")
        .select("*")
        .eq("code", code.trim())
        .eq("is_used", false)
        .single()

      if (fetchError || !accessCode) {
        setError("קוד גישה לא תקין או כבר נוצל")
        return
      }

      // Mark code as used
      const { error: updateError } = await supabase
        .from("access_codes")
        .update({
          is_used: true,
          used_at: new Date().toISOString(),
        })
        .eq("id", accessCode.id)

      if (updateError) {
        setError("שגיאה בעדכון קוד הגישה")
        return
      }

      // Store access in localStorage
      localStorage.setItem("daily_image_access", "true")
      localStorage.setItem("access_time", new Date().toISOString())

      // Go to registration
      router.push(`/register?access_code_id=${accessCode.id}`)
    } catch (err) {
      setError("שגיאה בחיבור לשרת")
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4">
      <Card className="w-full max-w-md">
        <CardHeader className="text-center">
          <div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <Eye className="w-8 h-8 text-blue-600" />
          </div>
          <CardTitle className="text-2xl">התמונה היומית</CardTitle>
          <CardDescription>הכנס את קוד הגישה שקיבלת כדי לצפות בתמונה היומית</CardDescription>
        </CardHeader>
        <CardContent>
          {isDemoMode && (
            <div className="mb-4 p-3 bg-yellow-50 border border-yellow-200 rounded-md">
              <div className="flex items-center">
                <AlertCircle className="w-4 h-4 text-yellow-600 ml-2" />
                <p className="text-sm text-yellow-800">
                  מצב הדגמה - השתמש בקוד: <code className="font-mono bg-yellow-100 px-1 rounded">DEMO123</code>
                </p>
              </div>
            </div>
          )}

          <form onSubmit={handleSubmit} className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">קוד גישה</label>
              <div className="relative">
                <Lock className="absolute right-3 top-3 w-4 h-4 text-gray-400" />
                <Input
                  type="text"
                  value={code}
                  onChange={(e) => setCode(e.target.value)}
                  placeholder={isDemoMode ? "DEMO123" : "הכנס קוד גישה"}
                  className="pr-10"
                  required
                />
              </div>
            </div>

            {error && <div className="text-red-600 text-sm bg-red-50 p-3 rounded-md">{error}</div>}

            <Button type="submit" className="w-full" disabled={loading || !code.trim()}>
              {loading ? "בודק..." : "כניסה"}
            </Button>
          </form>

          <div className="mt-6 text-center">
            <Button variant="link" onClick={() => router.push("/admin/login")} className="text-sm text-gray-500">
              כניסה למנהל
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}